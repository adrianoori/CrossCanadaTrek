note
	description: "Summary description for {CONTROLLER}."
	author: "Adrian Noori"
	date: "$Date$"
	revision: "$Revision$"

class
	CONTROLLER

create
	make

feature{NONE} -- Representation
	interface:VIEW
	player:PERSON
	map_itr: MAP_ITERATOR

	-- number of random numbers generated by "random" function
	-- used in lieu of milliseconds in calculation of random numbers
	-- if two random numbers are generated in the same second they will produce different results
	rand_count: INTEGER

feature{CONTROLLER_ACCESSOR} -- Initialization
	make
	do
		initialize
		main
	end

feature{NONE} -- Implementation
	initialize
	local
		starting_location:LOCATION
		starting_money:INTEGER
		destination:detachable LOCATION
		player_accessor:PERSON_ACCESSOR
		the_accessor:VIEW_ACCESSOR

		-- declare locations
		whitehorse: LOCATION
		victoria: LOCATION
		vancouver: LOCATION
		calgary: LOCATION
		edmonton: LOCATION
		yellowknife: LOCATION
		regina: LOCATION
		saskatoon: LOCATION
		winnipeg: LOCATION
		toronto: LOCATION
		kingston: LOCATION
		ottawa: LOCATION
		montreal: LOCATION
		quebec_city: LOCATION
		fredericton: LOCATION
		halifax: LOCATION
		charlottetown: LOCATION
		st_johns: LOCATION

		whitehorse_package:PACKAGE
		vancouver_package:PACKAGE
		edmonton_package:PACKAGE
		regina_package:PACKAGE
		winnipeg_package:PACKAGE
		kingston_package:PACKAGE
		montreal_package:PACKAGE
		fredericton_package:PACKAGE
		charlottetown_package:PACKAGE
	do
		create map_itr.make

		rand_count := 0

		-- Initialize locations
		create victoria.make ("Victoria, BC", 2)
		create calgary.make ("Calgary, AB", 5)
		create yellowknife.make ("Yellowknife, NT", 10)
		create saskatoon.make ("Saskatoon, SK", 4)
		create toronto.make ("Toronto, ON", 5)
		create ottawa.make ("Ottawa, ON", 3)
		create quebec_city.make ("Quebec City, QC", 3)
		create halifax.make ("Halifax, NS", 1)
		create st_johns.make ("St. John's, NL", 1)

		-- Initialize package
		create whitehorse_package.make(toronto, 30)
		create vancouver_package.make(saskatoon, 20)
		create edmonton_package.make(ottawa, 28)
		create regina_package.make(yellowknife, 25)
		create winnipeg_package.make(st_johns, 22)
		create kingston_package.make(quebec_city, 12)
		create montreal_package.make(victoria, 40)
		create fredericton_package.make(calgary, 54)
		create charlottetown_package.make(victoria, 55)

		-- Initialize locations with packages
		create whitehorse.make_package("Whitehorse, YK", 10, whitehorse_package)
		create vancouver.make_package("Vancouver, BC", 5, vancouver_package)
		create edmonton.make_package("Edmonton, AB", 4, edmonton_package)
		create regina.make_package("Regina, SK", 5, regina_package)
		create winnipeg.make_package("Winnipeg, MB", 6, winnipeg_package)
		create kingston.make_package("Kingston, ON", 1, kingston_package)
		create montreal.make_package("Montreal, QC", 2, montreal_package)
		create fredericton.make_package("Frederickton, NB", 3, fredericton_package)
		create charlottetown.make_package("Charlottetown, PE", 1, charlottetown_package)

		-- Set location neighbours
		whitehorse.set_south(vancouver)
		whitehorse.set_east (yellowknife)
		victoria.set_east (vancouver)
		vancouver.set_west (victoria)
		vancouver.set_north (whitehorse)
		vancouver.set_east (calgary)
		calgary.set_west (vancouver)
		calgary.set_north (edmonton)
		calgary.set_east (regina)
		edmonton.set_south (calgary)
		edmonton.set_north (yellowknife)
		edmonton.set_east (saskatoon)
		yellowknife.set_west (whitehorse)
		yellowknife.set_south (edmonton)
		regina.set_west (calgary)
		regina.set_north (saskatoon)
		regina.set_east (winnipeg)
		saskatoon.set_west (edmonton)
		saskatoon.set_south (regina)
		saskatoon.set_east (winnipeg)
		winnipeg.set_west (regina)
		winnipeg.set_north (saskatoon)
		winnipeg.set_east (toronto)
		toronto.set_west (winnipeg)
		toronto.set_east (kingston)
		toronto.set_north (ottawa)
		kingston.set_west (toronto)
		kingston.set_north (ottawa)
		kingston.set_east (montreal)
		ottawa.set_south (kingston)
		ottawa.set_west (toronto)
		ottawa.set_east (montreal)
		montreal.set_west (kingston)
		montreal.set_north (ottawa)
		montreal.set_east (quebec_city)
		quebec_city.set_west (montreal)
		quebec_city.set_east (fredericton)
		fredericton.set_west (quebec_city)
		fredericton.set_east (halifax)
		halifax.set_west (fredericton)
		halifax.set_east (charlottetown)
		halifax.set_north (st_johns)
		charlottetown.set_west (halifax)
		charlottetown.set_north (st_johns)
		st_johns.set_south (halifax)
		st_johns.set_east (charlottetown)

		-- Populate the map
		map_itr.add (whitehorse)
		map_itr.add (victoria)
		map_itr.add (vancouver)
		map_itr.add (calgary)
		map_itr.add (edmonton)
		map_itr.add (yellowknife)
		map_itr.add (regina)
		map_itr.add (saskatoon)
		map_itr.add (winnipeg)
		map_itr.add (toronto)
		map_itr.add (kingston)
		map_itr.add (ottawa)
		map_itr.add (montreal)
		map_itr.add (quebec_city)
		map_itr.add (fredericton)
		map_itr.add (halifax)
		map_itr.add (charlottetown)
		map_itr.add (st_johns)

		-- Generate random initial values for player (starting location, destination, money)
		starting_location := get_random_location(map_itr)
		starting_money := random \\ 25 + 50 -- Start with 25 to 75 dollars
		-- Destination must be different than starting location
		from
			destination := void
		until
			destination /= void AND THEN destination /= starting_location
		loop
			destination := get_random_location(map_itr) --random select from map
		end

		-- Initialize player
		create player_accessor.make(starting_location, starting_money, destination)
		player := player_accessor.the_player

		create the_accessor.make
		interface := the_accessor.the_interface
	ensure
		interface /= void
		player /= void
		player.place /= player.destination
	end -- end initialization routine

	main
	local
		user_input, output_to_user:STRING
	do
		output_to_user := ascii_title
		output_to_user := output_to_user + "You are a truck driver%N%R"
		output_to_user := output_to_user + "You have $" + player.money.out + "%N%R"
		output_to_user := output_to_user + "You are starting at " + player.place.name + "%N%R"
		output_to_user := output_to_user + "Your destination is " + player.destination.name + "%N%R"
		output_to_user := output_to_user + "Press 'C' to see a list of commands."

		user_input := interface.input(output_to_user)

		from user_input := user_input
		until user_input.is_case_insensitive_equal("exit") OR user_input.is_case_insensitive_equal("x")
		loop -- begin game loop

			-- If player has reached destination, give the option of continue playing
			-- or ending the game with a win
			if player.place = player.destination and not player.continue then
				from
					user_input := ""
				until
					user_input.is_case_insensitive_equal("y") OR ELSE user_input.is_case_insensitive_equal("yes")
					OR ELSE user_input.is_case_insensitive_equal("n") OR ELSE user_input.is_case_insensitive_equal("no")
					OR ELSE user_input.is_case_insensitive_equal("exit") OR ELSE user_input.is_case_insensitive_equal("x")
				loop
					user_input := interface.input("You've reached your destination! Would you like to continue driving? Y/N")
					if user_input.is_case_insensitive_equal("n") OR  user_input.is_case_insensitive_equal("no") then
						user_input := interface.input(ascii_win)
						user_input := "x"
					elseif user_input.is_case_insensitive_equal("y") OR user_input.is_case_insensitive_equal("yes") then
						output_to_user := "What next?"
						player.continue := true -- flag: indicate game not end yet
					end
				end
				if user_input.is_case_insensitive_equal("y") OR user_input.is_case_insensitive_equal("yes") then
					user_input := interface.input(output_to_user)
				end

			-- If player tries to make a move and does not have enough money to make any possible moves, then player lose.
			elseif (not attached player.place.get_north or else (attached player.place.get_north as north and then player.money < north.get_weight))
				and then (not attached player.place.get_east or else (attached player.place.get_east as east and then player.money < east.get_weight))
				and then (not attached player.place.get_south or else (attached player.place.get_south as south and then player.money < south.get_weight))
				and then (not attached player.place.get_west or else (attached player.place.get_west as west and then player.money < west.get_weight))
				and (user_input.is_case_insensitive_equal("n") OR user_input.is_case_insensitive_equal("north")
				  OR user_input.is_case_insensitive_equal("s") OR user_input.is_case_insensitive_equal("south")
				  OR user_input.is_case_insensitive_equal("w") OR user_input.is_case_insensitive_equal("west")
				  OR user_input.is_case_insensitive_equal("e") OR user_input.is_case_insensitive_equal("east")) then
				output_to_user := "You cannot go any farther. You lose.%N" + ascii_lose
				user_input := interface.input(output_to_user)
				user_input := "x"

			-- If player not at destination and can make moves, then respond to commands
			else
				if user_input.is_case_insensitive_equal("n") OR user_input.is_case_insensitive_equal("north")then
					--n: if player has enough money and location exists, move player.
					-- Update player location and deduct cost from money total
					if (attached player.place.north as north) then -- north exists
						if player.money >= north.get_weight then -- have enough money
							output_to_user := ("Driving north...%NThis trip will cost you: $" +
							north.get_weight.out + "%NWelcome to " + north.get_name + "!")
							player.place := north -- update current location
							player.money := player.money - north.get_weight
							player.continue := false -- reset continue flag
							-- initiate random ufo event
							output_to_user := output_to_user + random_ufo_event
						else
							output_to_user := "You don't have enough money to go this way."
						end
					else
						output_to_user := "Cannot drive north from your location: " + player.place.get_name + "."
					end

				elseif user_input.is_case_insensitive_equal("e") OR user_input.is_case_insensitive_equal("east")then
					--e: if player has enough money and location exists, move player.
					-- Update player location and deduct cost from money total
					if attached player.place.east as east then -- east exists
						if player.money >= east.get_weight then -- have enough money
							output_to_user := ("Driving east...%NThis trip will cost you: $" +
							east.get_weight.out + "%NWelcome to " + east.get_name + "!")
							player.place := east -- update current location
							player.money := player.money - east.get_weight
							player.continue := false -- reset continue flag
							-- initiate random ufo event
							output_to_user := output_to_user + random_ufo_event
						else
							output_to_user := "You don't have enough money to go this way."
						end
					else
						output_to_user := ("Cannot drive east from your location: " + player.place.get_name)
					end

				elseif user_input.is_case_insensitive_equal("s") OR user_input.is_case_insensitive_equal("south")then
					--s: if player has enough money and location exists, move player.
					-- Update player location and deduct cost from money total
					if (attached player.place.south as south) then -- south exists
						if player.money >= south.get_weight then -- have enough money
							output_to_user := ("Driving south...%NThis trip will cost you: $" +
							south.get_weight.out + "%NWelcome to " + south.get_name + "!")
							player.place := south -- update current location
							player.money := player.money - south.get_weight
							player.continue := false -- reset continue flag
							-- initiate random ufo event
							output_to_user := output_to_user + random_ufo_event
						else
							output_to_user := "You don't have enough money to go this way."
						end
					else
						output_to_user := ("Cannot drive south from your location: " + player.place.get_name)
					end

				elseif user_input.is_case_insensitive_equal("w") OR user_input.is_case_insensitive_equal("west")then
					--w: if player has enough money and location exists, move player.
					-- Update player location and deduct cost from money total
					if attached player.place.west as west then -- west exists
						if player.money >= west.get_weight then -- have enough money
							output_to_user := ("Driving west...%NThis trip will cost you: $" +
							west.get_weight.out + "%NWelcome to " + west.get_name + "!")
							player.place := west -- update current location
							player.money := player.money - west.get_weight
							player.continue := false -- reset continue flag
							-- initiate random ufo event
							output_to_user := output_to_user + random_ufo_event
						else
							output_to_user := "You don't have enough money to go this way."
						end
					else
						output_to_user := ("Cannot drive west from your location: " + player.place.get_name)
					end

				elseif user_input.is_case_insensitive_equal("m") OR user_input.is_case_insensitive_equal("map") then
					--m: open map and initiate a random event (coin)
					output_to_user := ascii_map
					output_to_user := output_to_user + random_coin_event
				elseif user_input.is_case_insensitive_equal("l") OR user_input.is_case_insensitive_equal("look")then
					--l: info for all nodes connected to player.place
					If attached player.place.north as north then
						output_to_user := "There is " + north.name + " to the north. It costs $" + north.get_weight.out + " to get there.%N%R"
					else
						output_to_user := "There is nothing to the north.%N%R"
					end

					If attached player.place.east as east then
						output_to_user := output_to_user + "There is " + east.name + " to the east. It costs $" + east.get_weight.out + " to get there.%N%R"
					else
						output_to_user := output_to_user + "There is nothing to the east.%N%R"
					end

					If attached player.place.south as south then
						output_to_user := output_to_user + "There is " + south.name + " to the south. It costs $" + south.get_weight.out + " to get there.%N%R"
					else
						output_to_user := output_to_user + "There is nothing to the south.%N%R"
					end

					If attached player.place.west as west then
						output_to_user := output_to_user + "There is " + west.name + " to the west. It costs $" + west.get_weight.out + " to get there.%N%R"
					else
						output_to_user := output_to_user + "There is nothing to the west.%N%R"
					end

					if attached player.place.package as package then
						output_to_user := output_to_user + "There is a package here which needs to go to " + package.destination.name + " you will be paid $" + package.value.out + " when delivered if you pick it up."
					else
						output_to_user := output_to_user + "There is no package here."
					end

				elseif user_input.is_case_insensitive_equal("p") OR user_input.is_case_insensitive_equal("package") OR user_input.is_case_insensitive_equal("pickup") then
					--p: if player.package is void then player.package = player.place.package
					--else output_to_user : = "must deliver or drop current package"
					If not attached player.package then
						if attached player.place.package As package then
							player.package := package
							output_to_user := "You have picked up the package."
						else
							output_to_user := "There is no package to pick up here."
						end
					else
						output_to_user := "You already are holding a package. Please drop it before trying to pick up another package."
					end

				elseif user_input.is_case_insensitive_equal("d") OR user_input.is_case_insensitive_equal("deliver") OR user_input.is_case_insensitive_equal("drop") then
					-- d: if player is holding package and player location matches package destination
					-- then reward player with money and remove package
					if attached player.package as player_package then
						if player.place = player_package.destination then
							player.money := player.money + player_package.value
							output_to_user := "You have delivered the package!%N%R"
							output_to_user := output_to_user + "You've earned $" + player_package.value.out + ". You now have: $" + player.money.out
							player.package := void
						else
							-- give option to drop the package if not at package destination
							from
								user_input := ""
							until
								user_input.is_case_insensitive_equal("y") OR ELSE user_input.is_case_insensitive_equal("yes")
								OR ELSE user_input.is_case_insensitive_equal("n") OR ELSE user_input.is_case_insensitive_equal("no")
								OR ELSE user_input.is_case_insensitive_equal("exit") OR ELSE user_input.is_case_insensitive_equal("x")
							loop
								user_input := interface.input("You can't deliver your package here. Would you like to drop it? Y/N")
								if user_input.is_case_insensitive_equal("y") OR user_input.is_case_insensitive_equal("yes") then
									player.package := void
								end
							end
							output_to_user := "What next?"
						end
					else
						output_to_user := "You do not have a package to drop."
					end

				elseif user_input.is_case_insensitive_equal("i") OR user_input.is_case_insensitive_equal("info") OR user_input.is_case_insensitive_equal("information") then
					--i: output_to_user := all the of player's information... location, money, package
					output_to_user := "You are in " + player.place.name + "%N%RYou have $" + player.money.out + "%N%R"

					If attached player.package as package then
						output_to_user := output_to_user + "You are holding a package worth $" + package.value.out +
						" when delivered which needs to be delivered to " + package.destination.name + "%N%R"
					else
						output_to_user := output_to_user + "You don't have a package%N%R"
					end

					output_to_user := output_to_user + "You need to get to " + player.destination.name

				elseif user_input.is_case_insensitive_equal("c") OR user_input.is_case_insensitive_equal("commands") then
					-- c: print list out commands
					output_to_user := "N(North) - go to location north of your current position.%N%R"
					output_to_user := output_to_user + "E(East) - go to location east of your current position.%N%R"
					output_to_user := output_to_user + "S(South) - go to location south of your current position.%N%R"
					output_to_user := output_to_user + "W(West) - go to location west of your current position.%N%R"
					output_to_user := output_to_user + "M(Map) - open the map and see your location.%N%R"
					output_to_user := output_to_user + "L(Look) - list information about the current city and list the cities around it.%N%R"
					output_to_user := output_to_user + "P(Package, Pickup) - attempt to pick up the package in the current city.%N%R"
					output_to_user := output_to_user + "D(Deliver, Drop) - attempt to deliver the package, prompt to drop if not you are not at the package's destination.%N%R"
					output_to_user := output_to_user + "I(Info Information) - list the player's location, money & package.%N%R"
					output_to_user := output_to_user + "C(Commands) - you now know what this command does.%N%R"
					output_to_user := output_to_user + "X(Exit) - quit the game.%N%R"
				else
					output_to_user := "Unrecognized command. Please try again."
				end

				user_input := interface.input(output_to_user)
			end

		end -- end game loop
	end -- end main routine

	random:INTEGER
	-- generates a random number
	require
    	not_negative: rand_count >= 0
	local
     	local_time:DATE_TIME
     	seed:INTEGER
     	sequence:RANDOM
   	do
   		rand_count := rand_count + 1

   		create local_time.make_now

   		seed := local_time.year
   		seed := seed * 365 + local_time.day
     	seed := seed * 24 + local_time.hour
     	seed := seed * 60 + local_time.minute
     	seed := seed * 60 + local_time.second
		seed := seed * 1000 + rand_count

     	create sequence.set_seed(seed)
     	sequence.forth
     	result := sequence.item
     ensure
     	not_negative: result >= 0
     end

     get_random_location(mapitr: MAP_ITERATOR): LOCATION
     -- generates a random location
     require
     	mapitr /= void
     	has_location: mapitr.count > 0
     local
     	rand_index: INTEGER
     do
		rand_index := random \\ mapitr.count + 1 -- get rand num from 1 to mapsize
		result := mapitr.list.at(rand_index)
	 ensure
	 	result /= void
	 	in_map: mapitr.list.has (result)
     end

     random_ufo_event: STRING
     -- random event: rewards player with $2
     local
     	rand_num: INTEGER
     do
     	rand_num := random \\ 20 + 1 -- get rand num from 1 to 20
     	if rand_num = 7 then
			player.money := player.money + 2
			Result := "%N%R                    |%N%R" +
			"             .     -O-    %N%R" +
			"  .                 |        *      .     -0-%N%R" +
			"         *  o     .    '       *      .        o%N%R" +
			"                .         .        |      *%N%R" +
			"     *             *              -O-          .%N%R" +
			"           .             *         |     ,%N%R" +
			"          .---.%N%R" +
			"    =   _/__~0_\_     .  *            o       ' %N%R" +
			"   = = (_________)             .            %N%R" +
			"                   .                        *%N%R" +
			"   jgs   *               - ) -       *      %N%R" +
			"You look up and see a mysterious UFO in the night sky...%N%R" +
			"It drops a hyper auraxium nanite%N%R" +
			"You trade it at the local pawn shop for $2!%N%R"
     	else
     		Result := ""
     	end
     ensure
     	money_equal_or_more: (player.money = old player.money) or (player.money = old player.money + 2)
     end

     random_coin_event: STRING
     -- random event: rewards player with $1
     local
     	rand_num: INTEGER
     do
     	rand_num := random \\ 10 + 1 -- get rand num from 1 to 10
     	if rand_num = 9 then
			player.money := player.money + 1
			Result := "%N%R*** While reaching for the map, you found $1 in change lying around! ***%N%R"
     	else
     		Result := ""
     	end
     ensure
     	money_equal_or_more: (player.money = old player.money) or (player.money = old player.money + 1)
     end

     ascii_title: STRING
     do
     	Result := "********************************************************************%N%R" +
     	"   ______   Welcome to:          ______                      __     %N%R" +
		"  / ____/________  __________   / ____/___ _____  ____ _____/ /___ _%N%R" +
		" / /   / ___/ __ \/ ___/ ___/  / /   / __ `/ __ \/ __ `/ __  / __ `/%N%R" +
		"/ /___/ /  / /_/ (__  |__  )  / /___/ /_/ / / / / /_/ / /_/ / /_/ / %N%R" +
		"\____/_/   \____/____/_____________/\__,___/ /_/\__,_/\__,_/\__,_/  %N%R" +
		"                        /_  __/_______  / /__                      %N%R" +
		"                         / / / ___/ _ \/ //_/                      %N%R" +
		"                        / / / /  /  __/ ,<                         %N%R" +
		"                       /_/ /_/   \___/_/|_|                         %N%R" +
		"********************************************************************%N%R"

     end

     ascii_win: STRING
     do
     	Result := "    _______________________________________________%N%R" +
		"   |                                               | |\%N%R" +
		"   |       You've reached your destination.        | ||%N%R" +
		"   |                                               |,%"%"---:___%N%R" +
		"   |                   You win!                    ||==  | .-.|%N%R" +
		"   |                                               ||==  | '-'-----.%N%R" +
		"   |_______________________________________________||    |~  |   -(|%N%R" +
		"     |_____________________________/<  _...==...____|    |   | ___ |%N%R" +
		"       \\ .-.  .-. //            \|  \//.-.  .-.\\ --------'-'/.-.\_]%N%R" +
		"        `( o )( o )'              '    ( o )( o )`%"%"%"%"%"%"%"%"%"==`( o )%N%R" +
		"   jgs    '-'  '-'                      '-'  '-'               '-'%N%R"
     end

	ascii_lose: STRING
	do
		Result := " ______     ______     __    __     ______             %N%R" +
			"/\  ___\   /\  __ \   /\ %"-./  \   /\  ___\            %N%R" +
			"\ \ \__ \  \ \  __ \  \ \ \-./\ \  \ \  __\            %N%R" +
			" \ \_____\  \ \_\ \_\  \ \_\ \ \_\  \ \_____\          %N%R" +
			"  \/_____/   \/_/\/_/   \/_/  \/_/   \/_____/          %N%R" +
			"             ______     __   __   ______     ______    %N%R" +
			"            /\  __ \   /\ \ / /  /\  ___\   /\  == \   %N%R" +
			"            \ \ \/\ \  \ \ \'/   \ \  __\   \ \  __<   %N%R" +
			"             \ \_____\  \ \__|    \ \_____\  \ \_\ \_\ %N%R" +
			"              \/_____/   \/_/      \/_____/   \/_/ /_/ %N%R"
	end

	ascii_map: STRING
	do
		Result := "     Whi.--Yel.%N" +
			"      |     |%N" +
			"      |     |%N" +
			"      |     |%N" +
			"      |    Edm.--Sas.-_                                 StJ.--_%N%R" +
			"      |      |    |    \        _---Ott.--\              |     |%N%R" +
			"Vic.-Van.--Cal.--Reg.--Win.-_  /        _-Mon.-Que.-Fre.-Hal.-Cha.%N%R" +
			"                             -Tor.-Kin.-%N%R" +
			"Your current location is: " + player.place.get_name + "%N%R" +
			"Your destination is: " + player.destination.get_name + "%N%R"
	end

feature{NONE} -- Invariant
	frozen the_instance:CONTROLLER
	once
		Result := Current
	end

invariant
	only_one_instance: the_instance = Current

end
